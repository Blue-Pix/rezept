AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  AppName:
    Description: project or application identifier
    Type: String
    Default: my-awesome-app
  Env:
    Description: environment
    Type: String
    AllowedValues:
      - test
      - qa
      - staging
      - production
    Default: test
  GithubOwnerName:
    Description: github owner name of the repository
    Type: String
  GithubRepositoryName:
    Description: github repository name
    Type: String
  BranchName:
    Description: branch name to deploy
    Type: String
  GitHubToken:
    Description: personal access token
    Type: String
Resources:
  CircleCIUser:
    Type: AWS::IAM::User
    Properties: 
      UserName: !Sub ${AppName}-${Env}-circleci
      Policies: 
        - PolicyName: start-pipeline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                  - codepipeline:ListPipelines
                  - codepipeline:GetPipelineState
                  - codepipeline:GetPipelineExecution
                  - codepipeline:GetPipeline
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${AppName}-${Env}-pipeline
  Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ${AppName}-${Env}-pipeline
      AccessControl: Private
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource: 
                  - !GetAtt Bucket.Arn
                  - !Join [ '/', [ !GetAtt Bucket.Arn, "*" ] ]
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource: "*"
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Cache: 
        Modes: 
          - LOCAL_DOCKER_LAYER_CACHE
        Type: LOCAL
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_REGION
            Type: PLAINTEXT
            Value: ap-northeast-1
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
          - Name: ECR_REPO_NAME
            Type: PLAINTEXT
            Value: !Sub ${AppName}-${Env}
      Name: !Sub ${AppName}-${Env}-build
      QueuedTimeoutInMinutes: 60
      ServiceRole: !Ref CodeBuildServiceRole
      Source: 
        Type: CODEPIPELINE
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AppName}-${Env}-pipeline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource:
                  - !GetAtt Bucket.Arn
                  - !Join [ '/', [ !GetAtt Bucket.Arn, "*" ] ]
              - Effect: Allow
                Action:
                  - codebuild:*
                  - ecs:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - iam:PassRole
                Resource: "*"
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        Location: !Ref Bucket
        Type: S3
      Name: !Sub ${AppName}-${Env}-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages: 
        - Name: Source
          Actions: 
            - Name: Source
              ActionTypeId: 
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GithubOwnerName
                Repo: !Ref GithubRepositoryName
                Branch: !Ref BranchName
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              Configuration:
                ClusterName:
                  Fn::ImportValue:
                    !Sub ${AppName}-${Env}-ecs-cluster
                ServiceName: 
                  Fn::ImportValue:
                    !Sub ${AppName}-${Env}-ecs-service-name
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1